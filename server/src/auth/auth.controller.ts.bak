import { Controller, Post, Body, Get, Query, UnauthorizedException, BadRequestException, UsePipes, ValidationPipe } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { AuthService } from './auth.service';
import { TelegramService } from './telegram.service';
import { User } from '../entities/User.entity';
import { RegisterDto, LoginDto, TelegramLoginDto, VerifyEmailDto, TelegramAuthDto, TelegramPasswordDto } from './dto/auth.dto';
import * as bcrypt from 'bcrypt';

@Controller('auth')
@UsePipes(new ValidationPipe())
export class AuthController {
  constructor(
    private readonly authService: AuthService,
    private readonly telegramService: TelegramService,
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
  ) {}

  @Post('register')
  async register(@Body() registerDto: RegisterDto) {
    if (!registerDto.email || !registerDto.password) {
      throw new BadRequestException('Email и пароль обязательны');
    }

    const existingUser = await this.userRepository.findOne({
      where: { email: registerDto.email }
    });

    if (existingUser) {
      throw new BadRequestException('Пользователь с таким email уже существует');
    }

    const hashedPassword = await bcrypt.hash(registerDto.password, 10);
    const user = this.userRepository.create({
      ...registerDto,
      password: hashedPassword,
      isVerified: false,
      isAdmin: false,
    });

    await this.userRepository.save(user);
    return this.authService.login(user);
  }

  @Post('login')
  async login(@Body() loginDto: LoginDto) {
    if (!loginDto.email || !loginDto.password) {
      throw new BadRequestException('Email и пароль обязательны');
    }

    const user = await this.authService.validateUser(loginDto.email, loginDto.password);
    if (!user) {
      throw new UnauthorizedException('Неверный email или пароль');
    }

    return this.authService.login(user);
  }

  @Get('telegram-login')
  async telegramLogin(@Query() telegramLoginDto: TelegramLoginDto) {
    if (!telegramLoginDto.id) {
      throw new BadRequestException('Telegram ID обязателен');
    }

    try {
      return await this.authService.loginWithTelegram(telegramLoginDto.id);
    } catch (error) {
      throw new UnauthorizedException(error.message);
    }
  }

  @Post('verify')
  async verifyEmail(@Body() verifyEmailDto: VerifyEmailDto) {
    if (!verifyEmailDto.token) {
      throw new BadRequestException('Токен обязателен');
    }

    const user = await this.userRepository.findOne({
      where: { id: verifyEmailDto.token }
    });

    if (!user) {
      throw new UnauthorizedException('Недействительный токен');
    }

    user.isVerified = true;
    await this.userRepository.save(user);

    return { message: 'Email успешно подтвержден' };
  }

  @Post('telegram/auth')
  async telegramAuth(@Body() telegramData: TelegramAuthDto) {
    try {
      const user = await this.telegramService.findOrCreateUser(telegramData);
      const token = await this.authService.generateToken(user);
      
      return {
        user: {
          id: user.id,
          clientCode: user.clientCode,
          firstName: user.firstName,
          lastName: user.lastName,
          telegramUsername: user.telegramUsername,
          telegramPhotoUrl: user.telegramPhotoUrl,
          referralCode: user.referralCode,
          referralBalance: user.referralBalance,
          cashbackBalance: user.cashbackBalance,
        },
        token,
      };
    } catch (error) {
      throw new BadRequestException('Failed to process Telegram authentication');
    }
  }

  @Post('telegram/set-password')
  async setTelegramPassword(@Body() passwordData: TelegramPasswordDto) {
    try {
      const user = await this.authService.setPassword(
        passwordData.telegramId,
        passwordData.password,
      );
      return { success: true };
    } catch (error) {
      throw new BadRequestException('Failed to set password');
    }
  }

  @Post('telegram/login')
  async telegramLoginNew(@Body() loginData: TelegramLoginDto) {
    try {
      const user = await this.authService.validateTelegramUser(loginData.telegramId);
      if (!user) {
        throw new UnauthorizedException('User not found');
      }

      const token = await this.authService.generateToken(user);
      return {
        user: {
          id: user.id,
          clientCode: user.clientCode,
          firstName: user.firstName,
          lastName: user.lastName,
          telegramUsername: user.telegramUsername,
          telegramPhotoUrl: user.telegramPhotoUrl,
          referralCode: user.referralCode,
          referralBalance: user.referralBalance,
          cashbackBalance: user.cashbackBalance,
        },
        token,
      };
    } catch (error) {
      throw new UnauthorizedException('Invalid credentials');
    }
  }

  @Post('telegram/referrals')
  async getReferrals(@Body('userId') userId: string) {
    try {
      const referrals = await this.telegramService.getReferrals(userId);
      return { referrals };
    } catch (error) {
      throw new BadRequestException('Failed to get referrals');
    }
  }
}
