import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';
import { Message } from 'telegraf/types';
import { UserService } from '../services/user.service';
import { BaseHandler } from './base.handler';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class ContactHandler extends BaseHandler {
  private readonly clientUrl: string;
  private readonly baseUrl: string;

  constructor(
    userService: UserService,
    private configService: ConfigService
  ) {
    super(userService);
    // –í development –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost, –≤ production - —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω
    this.clientUrl = this.configService.get('NODE_ENV') === 'production' 
      ? 'https://te.kg'
      : 'https://te.kg'; // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º te.kg –¥–∞–∂–µ –≤ development
    
    this.baseUrl = this.configService.get('BASE_URL') || 'https://api.te.kg';
  }

  async handle(ctx: Context) {
    try {
      const telegramId = await this.getTelegramId(ctx);
      if (!telegramId) return;

      const message = ctx.message as Message.ContactMessage;
      const contact = message.contact;

      if (!contact || contact.user_id?.toString() !== telegramId) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.');
        return;
      }

      const user = await this.userService.findByTelegramId(telegramId);
      if (user) {
        await ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = await this.userService.createUser({
        telegramId: telegramId,
        phoneNumber: contact.phone_number,
        firstName: contact.first_name,
        lastName: contact.last_name,
      });

      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è —Å —É—á–µ—Ç–æ–º API –ø—Ä–µ—Ñ–∏–∫—Å–∞
      const setPasswordUrl = `${this.clientUrl}/api/auth/set-password`;
      const phoneParam = encodeURIComponent(newUser.phoneNumber);

      await ctx.reply(
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîê –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å',
                  url: `${setPasswordUrl}?phone=${phoneParam}`
                }
              ]
            ],
            remove_keyboard: true
          }
        }
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      await ctx.reply(
        `–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞: ${newUser.phoneNumber}\n` +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –ø–∞—Ä–æ–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–æ–∑–¥–∞–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ.'
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    }
  }
}
